{{#
    How to fix an audit rule that watches a file.

:param path: Full path of file to watch
:type path: str
:param key: Auditd key for the system
:type key: str
:param rule_path: Full path to where the rule wil
:type rule_path: str
#}}
{{% macro fixtext_audit_file_watch_rule(path, key, rule_path) -%}}
Configure {{{ full_name }}} to generate audit records for all account creations, modifications, disabling, and termination events that affect <tt>{{{ path }}}</tt>.

Add or update the following file system rule to <tt>{{{ rule_path }}}</tt>:

-w {{{ path }}} -p wa -k {{{ key }}}

The audit daemon must be restarted for the changes to take effect.
{{% endmacro %}}

{{#
    Generate a fixtext for audit rules for file deletion events

:param syscall: Sycall name
:type path: str

#}}
{{% macro fixtext_audit_rules_file_deletion_events(syscall) -%}}
Configure the audit system to generate an audit event for any successful/unsuccessful use of the "{{{ syscall }}}" command by adding or updating the following rules in the "/etc/audit/rules.d/audit.rules" file:

-a always,exit -F arch=b32 -S {{{ syscall }}} -F auid>=1000 -F auid!=unset -k delete
-a always,exit -F arch=b64 -S {{{ syscall }}} -F auid>=1000 -F auid!=unset -k delete

It's allowed to group this system call within the same line as "rename", "unlink", "rmdir", "renameat", and "unlinkat".

The audit daemon must be restarted for the changes to take effect.
{{% endmacro %}}

{{#
    Human readable text for how to fix ini files

:param section: Section on the value to be set
:type section: str
:param parameter: parameter to be change
:type parameter: str
:param value: value to be set
:type value: str

#}}
{{%- macro fixtext_dconf_ini_file(section, parameter, value) -%}}
    The dconf settings can be edited in the /etc/dconf/db/* location.

    First, add or update the [{{{ section }}}] section of the "/etc/dconf/db/local.d/00-security-settings" database file and add or update the following lines:

    [{{{ section }}}]
    {{{ parameter }}}={{{ value }}}

    Then, add the following line to "/etc/dconf/db/local.d/locks/00-security-settings-lock" to prevent user modification:

    /{{{ section }}}/{{{ parameter }}}

    Finally, update the dconf system databases:

    $ sudo dconf update
{{%- endmacro -%}}

{{#
    Human readable text for how to lock dconf settings

:param section: Section on the value to be locked
:type section: str

#}}
{{%- macro fixtext_dconf_lock_settings(section) -%}}
    Configure the operating system to prevent a user from overriding settings for graphical user interfaces.

    Create a database to contain the system-wide screensaver settings (if it does not already exist) with the following command:

    Note: The example below is using the database "local" for the system, so if the system is using another database in "/etc/dconf/profile/user", the file should be created under the appropriate subdirectory.

    $ sudo touch /etc/dconf/db/local.d/locks/session

    Add the following setting to prevent non-privileged users from modifying it:

    {{{ section }}}
{{%- endmacro -%}}

{{#
    Describe how to fix an ssh configure

:param parameter: parameter to set
:type parameter: str
:parameter value: Value to set
:type value: str
:param config_is_distributed: Should the value go in 00-complianceascode-hardening.conf vs the main sshd config file

#}}
{{%- macro fixtext_sshd_lineinfile(parameter, value, config_is_distributed) -%}}
{{%- if config_is_distributed -%}}
{{%- set path = "/etc/ssh/sshd_config.d/00-complianceascode-hardening.conf" -%}}
{{%- else -%}}
{{%- set path = "/etc/ssh/sshd_config" -%}}
{{%- endif -%}}
    To configure the system add or modify the following line in "{{{ path }}}".

    {{{parameter}}} {{{value}}}

    Restart the SSH daemon for the settings to take effect:

    $ sudo systemctl restart sshd.service

{{%- endmacro -%}}

{{#
    Describe how to enable a service

:param parameter: service to enable
:type parameter: str

#}}
{{%- macro fixtext_service_enabled(service) -%}}
    To enable the {{{ service }}} service run the following command:

    $ systemctl enable --now {{{ service }}}
{{%- endmacro -%}}

{{#
    Macro describing fix for sysctl rules.

:param sysctl: The kernel parameter to be changed.
:type sysctl: str
:param value: The value of the kernel parameter.
:type value: str

#}}
{{% macro fixtext_sysctl(sysctl, value) -%}}
Add or edit the following line in a system configuration file in the "/etc/sysctl.d/" directory:
{{{ sysctl }}} = {{{ value }}}

Load settings from all system configuration files with the following command:

$ sudo sysctl --system
{{%- endmacro %}}

{{#
    Describe fix for GRUB 2 bootloader kernel argument
    This can be used for rules that use grub2_bootloader_argument template
    or have macro grub2_bootloader_argument_remediation in their remediation.

:param argument: Kernel argument
:type argument: str
:param value: The argument's value
:type value: str

#}}
{{% macro fixtext_grub2_bootloader_argument(argument, value) %}}
{{% if 'ubuntu' in product or product in ['rhel7', 'ol7', 'sle12', 'sle15'] %}}
Update the GRUB_CMDLINE_LINUX line in '/etc/default/grub' so that it contains {{{ argument }}}={{{ value }}}.
{{% endif -%}}

Run the following command:

$ sudo {{{ grub_command("add", argument + "=" + value) }}}
{{% endmacro %}}

{{#
    Describe fix for removal of a GRUB 2 bootloader kernel argument
    This can be used for rules that use grub2_bootloader_argument_absent template
    or have macro grub2_bootloader_argument_remediation in their remediation.

:param argument: Kernel argument
:type argument: str

#}}
{{% macro fixtext_grub2_bootloader_argument_absent(argument) %}}
{{%- if 'ubuntu' in product or product in ['rhel7', 'ol7', 'sle12', 'sle15'] -%}}
Update the GRUB_CMDLINE_LINUX line in '/etc/default/grub' so that it does not contain any occurrence of {{{ argument }}} using the following command:

$ sudo sed -i 's/\(^GRUB_CMDLINE_LINUX=".*\){{{ argument }}}=?[^[:space:]]*\(.*"\)/\1 \2/' '/etc/default/grub'
{{%- endif -%}}

Run the following command:
$ sudo {{{ grub_command("remove", argument) }}}
{{% endmacro %}}


{{#
    Macro describing fix for audit configuration.

:param param: The audit configuration to be changed.
:type param: str
:param value: The value of the audit configuration.
:type value: str
#}}
{{% macro fixtext_audit_configuration(param, value) -%}}
Edit the file "/etc/audit/auditd.conf" and add or edit the following line:
{{{ param }}} = {{{ value }}}

{{%- endmacro %}}
